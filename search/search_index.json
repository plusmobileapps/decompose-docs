{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"getting-started/","text":"Getting started \u00b6 About \u00b6 Kotlin Multiplatform lifecycle-aware business logic components (aka BLoCs) with routing functionality and pluggable UI (Android Views, Jetpack Compose, SwiftUI, JS React, etc.) This project is inspired by Badoos RIBs fork of the Uber RIBs framework. Supported targets: - Android - JVM - iosX64, iosArm64 - JavaScript Setup \u00b6 Decompose is published to Bintray, the repository is synchronized with JCenter. Make sure you have the JCenter repository specified in your build.gradle: repositories { jcenter () } Add Decompose dependency to your build.gradle: implementation \"com.arkivanov.decompose:decompose:<version>\" Add extensions for Android Views to your Android build.gradle: implementation \"com.arkivanov.decompose:extensions-android:<version>\" Add extensions for Jetpack Compose to your Android build.gradle: implementation \"com.arkivanov.decompose:extensions-compose-jetpack:<version>\" Add extensions for JetBrains Compose to your Android/JVM/Multiplatform build.gradle: implementation \"com.arkivanov.decompose:extensions-compose-jetbrains:<version>\"","title":"Installation"},{"location":"getting-started/#getting-started","text":"","title":"Getting started"},{"location":"getting-started/#about","text":"Kotlin Multiplatform lifecycle-aware business logic components (aka BLoCs) with routing functionality and pluggable UI (Android Views, Jetpack Compose, SwiftUI, JS React, etc.) This project is inspired by Badoos RIBs fork of the Uber RIBs framework. Supported targets: - Android - JVM - iosX64, iosArm64 - JavaScript","title":"About"},{"location":"getting-started/#setup","text":"Decompose is published to Bintray, the repository is synchronized with JCenter. Make sure you have the JCenter repository specified in your build.gradle: repositories { jcenter () } Add Decompose dependency to your build.gradle: implementation \"com.arkivanov.decompose:decompose:<version>\" Add extensions for Android Views to your Android build.gradle: implementation \"com.arkivanov.decompose:extensions-android:<version>\" Add extensions for Jetpack Compose to your Android build.gradle: implementation \"com.arkivanov.decompose:extensions-compose-jetpack:<version>\" Add extensions for JetBrains Compose to your Android/JVM/Multiplatform build.gradle: implementation \"com.arkivanov.decompose:extensions-compose-jetbrains:<version>\"","title":"Setup"},{"location":"license/","text":"Apache License Version 2.0, January 2004 http://www.apache.org/licenses/ TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION Definitions. \"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document. \"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License. \"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity. \"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License. \"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files. \"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types. \"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below). \"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof. \"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\" \"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work. Grant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form. Grant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed. Redistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions: (a) You must give any other recipients of the Work or Derivative Works a copy of this License; and (b) You must cause any modified files to carry prominent notices stating that You changed the files; and \u00a9 You must retain, in the Source form of any Derivative Works that You distribute, all copyright, patent, trademark, and attribution notices from the Source form of the Work, excluding those notices that do not pertain to any part of the Derivative Works; and (d) If the Work includes a \"NOTICE\" text file as part of its distribution, then any Derivative Works that You distribute must include a readable copy of the attribution notices contained within such NOTICE file, excluding those notices that do not pertain to any part of the Derivative Works, in at least one of the following places: within a NOTICE text file distributed as part of the Derivative Works; within the Source form or documentation, if provided along with the Derivative Works; or, within a display generated by the Derivative Works, if and wherever such third-party notices normally appear. The contents of the NOTICE file are for informational purposes only and do not modify the License. You may add Your own attribution notices within Derivative Works that You distribute, alongside or as an addendum to the NOTICE text from the Work, provided that such additional attribution notices cannot be construed as modifying the License. You may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License. Submission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions. Trademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file. Disclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License. Limitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages. Accepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability. END OF TERMS AND CONDITIONS APPENDIX: How to apply the Apache License to your work. To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!) The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives. Copyright [yyyy] [name of copyright owner] Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.","title":"License"},{"location":"samples/","text":"Sample apps \u00b6 There are two sample apps: Counter and Todo List. Sample counter app \u00b6 This sample demonstrates the following features: - Nested components - Routing - Reused components - State preservation (using StateKeeper ) - Retaining instances (using InstanceKeeper ) - Pluggable UI (Android Views, Jetpack Compose, SwiftUI, JS React) Content: - Shared module which includes the following components: - Counter - this component just increments the counter every 250 ms. It starts counting once created and stops when destroyed. So Counter continues counting while in the back stack, unless recreated. It uses the InstanceKeeper , so counting continues after configuration changes. - CounterInnerContainer - this component contains the Counter and two Routers on the left and on the right side. Each Router displays its stack of Counters and two buttons for navigation. \"Next\" button pushes another Counter to the corresponding Router , \"Prev\" button pops the active Counter for the Router . - CounterRootComponent - this component contains the Counter , the Router of CounterInnerContainer and a button pushing another CounterInnerContainer to the stack. System back button is used for backward navigation. - Android sample app - iOS sample app - JavaScript sample app Sample Counter Component structure \u00b6 Sample Todo List app \u00b6 This sample can be found in the JetBrains Compose repository here . It demonstrates the following features: - Multiplatform: Android, iOS and Desktop - Shared JetBrains Compose UI for Android and Desktop apps - SwiftUI for iOS app - Nested components - Shared routing with view state preservation - Using Lifecycle - Multi-module structure (one component per module) - Inter-component communication (via Reaktive , just an example) - MVI using MVIKotlin - Data persistance using SQLDelight Please refer to the sample's readme for more information. Articles \u00b6 Decompose \u2014 experiments with Kotlin Multiplatform lifecycle-aware components and navigation Fully cross-platform Kotlin applications (almost)","title":"Samples"},{"location":"samples/#sample-apps","text":"There are two sample apps: Counter and Todo List.","title":"Sample apps"},{"location":"samples/#sample-counter-app","text":"This sample demonstrates the following features: - Nested components - Routing - Reused components - State preservation (using StateKeeper ) - Retaining instances (using InstanceKeeper ) - Pluggable UI (Android Views, Jetpack Compose, SwiftUI, JS React) Content: - Shared module which includes the following components: - Counter - this component just increments the counter every 250 ms. It starts counting once created and stops when destroyed. So Counter continues counting while in the back stack, unless recreated. It uses the InstanceKeeper , so counting continues after configuration changes. - CounterInnerContainer - this component contains the Counter and two Routers on the left and on the right side. Each Router displays its stack of Counters and two buttons for navigation. \"Next\" button pushes another Counter to the corresponding Router , \"Prev\" button pops the active Counter for the Router . - CounterRootComponent - this component contains the Counter , the Router of CounterInnerContainer and a button pushing another CounterInnerContainer to the stack. System back button is used for backward navigation. - Android sample app - iOS sample app - JavaScript sample app","title":"Sample counter app"},{"location":"samples/#sample-counter-component-structure","text":"","title":"Sample Counter Component structure"},{"location":"samples/#sample-todo-list-app","text":"This sample can be found in the JetBrains Compose repository here . It demonstrates the following features: - Multiplatform: Android, iOS and Desktop - Shared JetBrains Compose UI for Android and Desktop apps - SwiftUI for iOS app - Nested components - Shared routing with view state preservation - Using Lifecycle - Multi-module structure (one component per module) - Inter-component communication (via Reaktive , just an example) - MVI using MVIKotlin - Data persistance using SQLDelight Please refer to the sample's readme for more information.","title":"Sample Todo List app"},{"location":"samples/#articles","text":"Decompose \u2014 experiments with Kotlin Multiplatform lifecycle-aware components and navigation Fully cross-platform Kotlin applications (almost)","title":"Articles"},{"location":"why-decompose/","text":"Why Decompose? \u00b6 Decompose draws clear boundaries between UI and non-UI code, which gives the following benefits: Better separation of concerns Pluggable platform-specific UI (Compose, SwiftUI, React, etc.) Business logic code is testable with pure multiplatform unit tets Proper dependency injection (DI) and inversion of control (IoC) via constructor Shared navigation logic Lifecycle-aware components Components in the back stack are not destroyed, they continue working in background without UI Components and UI state preservation (mostly useful in Android) Instances retaining (aka ViewModels) over configuration changes (mostly useful in Android)","title":"Why Decompose?"},{"location":"why-decompose/#why-decompose","text":"Decompose draws clear boundaries between UI and non-UI code, which gives the following benefits: Better separation of concerns Pluggable platform-specific UI (Compose, SwiftUI, React, etc.) Business logic code is testable with pure multiplatform unit tets Proper dependency injection (DI) and inversion of control (IoC) via constructor Shared navigation logic Lifecycle-aware components Components in the back stack are not destroyed, they continue working in background without UI Components and UI state preservation (mostly useful in Android) Instances retaining (aka ViewModels) over configuration changes (mostly useful in Android)","title":"Why Decompose?"},{"location":"component/overview/","text":"Component Overview \u00b6 Component \u00b6 Every component represents a piece of logic with lifecycle and optional pluggable UI. Simplest component example \u00b6 Here is an example of simple Counter component: class Counter { private val _value = MutableValue ( State ()) val state : Value < State > = _value fun increment () { _value . reduce { it . copy ( count = it . count + 1 ) } } data class State ( val count : Int = 0 ) } Jetpack/JetBrains Compose UI example: @Composable fun Counter . render () { state . observe { state -> Column ( horizontalGravity = Alignment . CenterHorizontally ) { Text ( text = state . count . toString ()) Button ( onClick = :: increment ) { Text ( \"Increment\" ) } } } } SwiftUI example: struct CounterView : View { private let counter : Counter @ ObservedObject private var state : ObservableValue < CounterState > init ( _ counter : Counter ) { self . counter = counter self . state = ObservableValue ( counter . state ) } var body : some View { VStack ( spacing : 8 ) { Text ( self . state . value . text ) Button ( action : self . counter . increment , label : { Text ( \"Increment\" ) }) } } } If you are using only Jetpack/JetBrains Compose UI, then most likely you can use its State and MutableState directly, without intermediate Value / MutableValue from Decompose. ComponentContext \u00b6 Each component has an associated ComponentContext which implements the following interfaces: - RouterFactory , so you can create nested Routers in your Componenets - StateKeeperOwner , so you can preserve any state during configuration changes and/or process death - InstanceKeeperOwner , so you can retain instances in your components (like with AndroidX ViewModels) - LifecycleOwner , so each component has its own lifecycle - BackPressedDispatcherOwner , so each component can handle back button events So if a component requires any of the above features, just pass the ComponentContext via the component's constructor. When instantiating a root component we have to create ComponentContext manually. There are various helper functions and default implementations to simplify this process. Child contexts are provided by the Router for every child component.","title":"Overview"},{"location":"component/overview/#component-overview","text":"","title":"Component Overview"},{"location":"component/overview/#component","text":"Every component represents a piece of logic with lifecycle and optional pluggable UI.","title":"Component"},{"location":"component/overview/#simplest-component-example","text":"Here is an example of simple Counter component: class Counter { private val _value = MutableValue ( State ()) val state : Value < State > = _value fun increment () { _value . reduce { it . copy ( count = it . count + 1 ) } } data class State ( val count : Int = 0 ) } Jetpack/JetBrains Compose UI example: @Composable fun Counter . render () { state . observe { state -> Column ( horizontalGravity = Alignment . CenterHorizontally ) { Text ( text = state . count . toString ()) Button ( onClick = :: increment ) { Text ( \"Increment\" ) } } } } SwiftUI example: struct CounterView : View { private let counter : Counter @ ObservedObject private var state : ObservableValue < CounterState > init ( _ counter : Counter ) { self . counter = counter self . state = ObservableValue ( counter . state ) } var body : some View { VStack ( spacing : 8 ) { Text ( self . state . value . text ) Button ( action : self . counter . increment , label : { Text ( \"Increment\" ) }) } } } If you are using only Jetpack/JetBrains Compose UI, then most likely you can use its State and MutableState directly, without intermediate Value / MutableValue from Decompose.","title":"Simplest component example"},{"location":"component/overview/#componentcontext","text":"Each component has an associated ComponentContext which implements the following interfaces: - RouterFactory , so you can create nested Routers in your Componenets - StateKeeperOwner , so you can preserve any state during configuration changes and/or process death - InstanceKeeperOwner , so you can retain instances in your components (like with AndroidX ViewModels) - LifecycleOwner , so each component has its own lifecycle - BackPressedDispatcherOwner , so each component can handle back button events So if a component requires any of the above features, just pass the ComponentContext via the component's constructor. When instantiating a root component we have to create ComponentContext manually. There are various helper functions and default implementations to simplify this process. Child contexts are provided by the Router for every child component.","title":"ComponentContext"},{"location":"router/overview/","text":"Router Overview \u00b6 The Router \u00b6 A key unit is the Router . It is responsible for managing components, just like FragmentManager . The Router supports back stack and so each component has its own Lifecycle . Each time a new component is pushed, the currently active component is stopped. When a component is popped from the back stack, the previous component is resumed. This allows business logic to run while the component is in the back stack. Each component is created based on an associated Configuration . Configurations can be persisted via Android's saved state , thus allowing back stack restoration after configurations change or process death. When the back stack is restored, only currently active components are recreated. All others in the back stack remain destroyed, and recreated on demand when navigating back. Decompose defines both Parcelable interface and @Parcelize annotation in common code using expect/actual, which works well with Kotlin Multiplatform. You can read more about it here . The Router has a state consisting of a currently active component and a back stack, so it can be rendered as any other state. Routers can be nested, and each component can have more than one Router . Routing example \u00b6 Here is a very basic example of navigation between two children components: class Child1 ( componentContext : ComponentContext ) : ComponentContext by componentContext { // omitted code } class Child2 ( componentContext : ComponentContext , data : String ) : ComponentContext by componentContext { // omitted code } class Parent ( componentContext : ComponentContext ) : ComponentContext by componentContext { private val router = router < Config , Any >( initialConfiguration = Config . Child1 , componentFactory = :: createChild ) val children : Value < RouterState < Config , Any >> get () = router . state private fun createChild ( config : Config , componentContext : ComponentContext ): Any = when ( config ) { is Config . Child1 -> Child1 ( componentContext ) is Config . Child2 -> Child2 ( componentContext , data = config . data ) } fun showChild2 ( data : String ) { router . push ( Config . Child2 ( data = data )) } fun popChild () { router . pop () } sealed class Config : Parcelable { @Parcelize object Child1 : Config () @Parcelize class Child2 ( val data : String ) : Config () } }","title":"Overview"},{"location":"router/overview/#router-overview","text":"","title":"Router Overview"},{"location":"router/overview/#the-router","text":"A key unit is the Router . It is responsible for managing components, just like FragmentManager . The Router supports back stack and so each component has its own Lifecycle . Each time a new component is pushed, the currently active component is stopped. When a component is popped from the back stack, the previous component is resumed. This allows business logic to run while the component is in the back stack. Each component is created based on an associated Configuration . Configurations can be persisted via Android's saved state , thus allowing back stack restoration after configurations change or process death. When the back stack is restored, only currently active components are recreated. All others in the back stack remain destroyed, and recreated on demand when navigating back. Decompose defines both Parcelable interface and @Parcelize annotation in common code using expect/actual, which works well with Kotlin Multiplatform. You can read more about it here . The Router has a state consisting of a currently active component and a back stack, so it can be rendered as any other state. Routers can be nested, and each component can have more than one Router .","title":"The Router"},{"location":"router/overview/#routing-example","text":"Here is a very basic example of navigation between two children components: class Child1 ( componentContext : ComponentContext ) : ComponentContext by componentContext { // omitted code } class Child2 ( componentContext : ComponentContext , data : String ) : ComponentContext by componentContext { // omitted code } class Parent ( componentContext : ComponentContext ) : ComponentContext by componentContext { private val router = router < Config , Any >( initialConfiguration = Config . Child1 , componentFactory = :: createChild ) val children : Value < RouterState < Config , Any >> get () = router . state private fun createChild ( config : Config , componentContext : ComponentContext ): Any = when ( config ) { is Config . Child1 -> Child1 ( componentContext ) is Config . Child2 -> Child2 ( componentContext , data = config . data ) } fun showChild2 ( data : String ) { router . push ( Config . Child2 ( data = data )) } fun popChild () { router . pop () } sealed class Config : Parcelable { @Parcelize object Child1 : Config () @Parcelize class Child2 ( val data : String ) : Config () } }","title":"Routing example"}]}